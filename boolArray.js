/**
 * Creates a boolean object to be used on the {@link BoolArray}
 * @param {string} bool - A string representation of a boolean comparison
 * @param {*} value - The value associated with the boolean
 * @returns {object} Returns a properly built object to be added to the {@link BoolArray}
 */
function cBoolObj(bool,value){
    if (typeof eval(bool) == "boolean")
        return {bool:bool,value:value};
}
/**
 * An internal function to test the validity of the objects added to a {@link BoolArray}
 * @param {object} boolObj - An object generated by the {@link cBoolObj} function
 * @returns {boolean} Returns a boolean that represents the validity of the parameter
 */
function testBoolObj(boolObj){
    let isValid;
    if (!Array.isArray(boolObj) && Object.keys(boolObj).length > 0){
	    var keys = Object.keys(boolObj);
	    if (keys[0]=="bool" && keys[1]=="value"){
	        if (typeof eval(boolObj[keys[0]])=="boolean"){
	            isValid = true;
	        }else isValid = false;
	    }else isValid = false;
    }else isValid = false;
    return isValid;
}
/**
 * The class that generates conditional arrays.
 * @param  {...object} values - The objects created by the {@link cBoolObj} function
 */
function BoolArray(...values){
    this.array = [];
    for (let i of values){
        if (testBoolObj(i)) this.array.push(i);
    }
    /**
     * A function to validate and add new elements to the array.
     * @param {object} pushedValue An object generated by the {@link cBoolObj} function that will be validated and then added to the array.
     */
    this.push = function(pushedValue){if (testBoolObj(pushedValue)) this.array.push(pushedValue);}
    /**
     * Removes the last element from an array. If the array is empty, the array is not modified.
     */
    this.pop = function(){if (this.array.length>0) this.array.pop();}
    /**
     * Removes the first element from an array. If the array is empty, the array is not modified.
     */
    this.shift = function(){if (this.array.length>0) this.array.shift();}
    /**
     * Reverses the elements of the array.
     */
    this.reverse = function(){if (this.array.length>1) this.array.reverse();}
    /**
     * A function that returns a stringified version of the array ready to be logged to the console.
     * @returns {string} A string representing the array.
     */
    this.log = function(){
        let toLog = `--BoolArray--`;
        for (let i of this.array) toLog += `\n{\n  bool:${i["bool"]}\n  value:${i["value"]}\n}${((this.array.indexOf(i)+1)<this.array.length)?',':''}`;
        return toLog;
    }
    /**
     * A function that tests the boolean values and returns the value associated to the first boolean that returns true.
     * @returns {*} The value associated to the first boolean that returns true.
     */
    this.run = function(){
        if (this.array.length>0) for (let i of this.array){
            if (eval(i["bool"])) return i["value"];
        }
    }
}